apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: managed-nfs-storage
provisioner: qgg-nfs-storage #这里的名称要和provisioner配置文件中的环境变量PROVISIONER_NAME保持一致
parameters:
  archiveOnDelete: "false"
#第一种配置
##   archiveOnDelete: "false"  
##   reclaimPolicy: Delete   #默认没有配置,默认值为Delete
##   1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
##   2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
##   3.删除PVC后,PV被删除且NFS Server对应数据被删除
##
##第二种配置
##   archiveOnDelete: "false"  
#    reclaimPolicy: Retain  
#   1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#   2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#   3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留
#   4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中
#
#第三种配置
#
#    archiveOnDelete: "ture"  
#    reclaimPolicy: Retain
#    1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#    2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#    3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留
#    4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中
#
#第四种配置
#
#    archiveOnDelete: "ture"  
#    reclaimPolicy: Delete 
#    1.pod删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#    2.sc删除重建后数据依然存在,旧pod名称及数据依然保留给新pod使用
#    3.删除PVC后,PV不会别删除,且状态由Bound变为Released,NFS Server对应数据被保留
#    4.重建sc后,新建PVC会绑定新的pv,旧数据可以通过拷贝到新的PV中
#
#
#    总结:除以第一种配置外,其他三种配置在PV/PVC被删除后数据依然保留
#
#
#   如何设置默认的StorageClass
#    get sc  #查看当前sc
#   kubectl patch storageclass managed-nfs-storage -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'  #设置managed-nfs-storage为默认后端存储
#   kubectl get sc  #再次查看,注意是否有default标识
#   kubectl patch storageclass managed-nfs-storage -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}' #取消默认存储后端
#  yaml文件形式
#apiVersion: storage.k8s.io/v1
#kind: StorageClass
#metadata:
#  name: managed-nfs-storage
#  annotations:
#    "storageclass.kubernetes.io/is-default-class": "true"   #添加此注释
#provisioner: qgg-nfs-storage #or choose another name, must match deployment's env PROVISIONER_NAME'
#parameters:
#  archiveOnDelete: "false"
#  
#  如果集群有一个默认的StorageClass能够满足我们的需求，那么剩下所有需要做的就是创建PersistentVolumeClaim(PVC)，剩下的都有默认的动态配置搞定，包括无需去指定storageClassName：
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
# name: mypvc
# namespace: testns
#spec:
# accessModes:
# - ReadWriteOnce
# resources:
#   requests:
#     storage: 10Gi
#
#修改默回收策略(默认为Delete)
#apiVersion: storage.k8s.io/v1
#kind: StorageClass
#metadata:
#  name: managed-nfs-storage
#  annotations:
#provisioner: qgg-nfs-storage #or choose another name, must match deployment's env PROVISIONER_NAME'
#parameters:
#  archiveOnDelete: "ture" #暂时不清楚该值对回收策略产生什么影响
#reclaimPolicy: Retain   #只有NFS 和hostPth支持两种回收策略
#不能删除默认的StorageClass，因为它是作为集群的add-on安装的，如果它被删除，会被重新安装。
#当然，可以停掉默认的StorageClass行为，通过删除annotation：storageclass.beta.kubernetes.io/is-default-class,或者设置为false。
#如果没有StorageClass对象标记默认的annotation，那么PersistentVolumeClaim对象（在不指定StorageClass情况下）将不自动触发动态配置。相反，它们将回到绑定可用的*PersistentVolume(PV)*的状态。
#如果一个卷是动态配置的卷，则默认的回收策略为“删除”。这意味着，在默认的情况下，当PVC被删除时，基础的PV和对应的存储也会被删除。如果需要保留存储在卷上的数据，则必须在PV被设置之后将回收策略从delete更改为retain。
